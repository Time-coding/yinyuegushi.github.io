(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{43:function(t,a,s){"use strict";s.r(a);var r=s(0),n=Object(r.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"动态优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态优化")]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("p",[t._v("动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。")]),t._v(" "),s("h2",{attrs:{id:"与分治算法相比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与分治算法相比","aria-hidden":"true"}},[t._v("#")]),t._v(" 与分治算法相比")]),t._v(" "),s("p",[t._v("动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。")]),t._v(" "),s("p",[t._v("与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相"),s("strong",[t._v("独立的")]),t._v("。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。")]),t._v(" "),s("h2",{attrs:{id:"适用条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用条件","aria-hidden":"true"}},[t._v("#")]),t._v(" 适用条件")]),t._v(" "),s("p",[t._v("任何思想方法都有一定的局限性，超出了特定条件，它就失去了作用。同样，动态规划也并不是万能的。适用动态规划的问题必须满足"),s("strong",[t._v("最优化原理和无后效性")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("最优化原理（最优子结构性质")]),t._v("）一个最优化策略具有这样的性质，不论过去状态和决策如何，对前面的决策所形成的状态而言，余下的诸决策必须构成最优策略。简而言之，一个最优化策略的子策略总是最优的。一个问题满足最优化原理又称其具有最优子结构性质。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("无后效性")]),t._v("将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。换句话说，每个状态都是过去历史的一个完整总结。这就是无后向性，又称为无后效性。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("子问题的重叠性")]),t._v(" 动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。其中的关键在于解决冗余，这是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其它的算法。")])])]),t._v(" "),s("h2",{attrs:{id:"分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),s("ul",[s("li",[t._v("线性动规：拦截导弹，合唱队形，挖地雷，建学校，剑客决斗等；")]),t._v(" "),s("li",[t._v("区域动规：石子合并， 加分二叉树，统计单词个数，炮兵布阵等；")]),t._v(" "),s("li",[t._v("树形动规：贪吃的九头龙，二分查找树，聚会的欢乐，数字三角形等；")]),t._v(" "),s("li",[t._v("背包问题：01背包问题，完全背包问题，分组背包问题，二维背包，装箱问题，挤牛奶（同济ACM第1132题）等")])]),t._v(" "),s("h2",{attrs:{id:"应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),s("p",[t._v("案例大多从"),s("a",{attrs:{href:"https://leetcode-cn.com/problemset/all/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetCode"),s("OutboundLink")],1),t._v("和其他网络文章收集")]),t._v(" "),s("h3",{attrs:{id:"最大子序和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大子序和","aria-hidden":"true"}},[t._v("#")]),t._v(" 最大子序和")]),t._v(" "),s("p",[t._v("给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。")]),t._v(" "),s("p",[t._v("示例:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("输入"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n输出"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n解释"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 连续子数组 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 的和最大，为 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("。\n")])])]),s("p",[t._v("这是一道明显的最优子结构的动态规划的算法题，首先符合上述动态优化的特性，那么我们开始明确动态优化的步骤：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("分阶段")])])]),t._v(" "),s("ul",[s("li",[t._v("我们可以把数组分为3个阶段，最优子结构之前、最优子结构、最优子结构之后；当然也可能是两个阶段，道理相同；描述阶段的变量称为阶段变量。")]),t._v(" "),s("li",[t._v("如例子，[-2,1,-3]就是最优子结构之前的阶段；[-5,4]是最优子结构之后的阶段。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("明确状态")])])]),t._v(" "),s("ul",[s("li",[t._v("每个阶段都会有两个状态，一个是当前阶段起始位置之前，也是上一个阶段的终止位置；另一个是当前阶段的终止为位置，也是下一个阶段的起始位置。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("strong",[t._v("找到最优策略")])])]),t._v(" "),s("ul",[s("li")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("strong",[t._v("明确状态转移方程")])])])])},[],!1,null,null,null);a.default=n.exports}}]);